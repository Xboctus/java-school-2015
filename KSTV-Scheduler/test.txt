При запуске сервер совершает следующее:
1) Открывает серверный сокет на каком-нибудь порте.
2) Запускает доп. поток, ждущий входящих соединений на этом сокете.
3) Запускает поток-таймер.

Взаимодействие:
1) Клиент посылает серверу HTTP-запрос с логином. (Установив идентификатор сессии, если уже знает его.)
2) Сервер принимает запрос, обращается к БД.
3) Сервер добавляет в таймер задачу ответа клиенту по сокету. (Этого сокета пока нет.)
4) Сервер возвращает HTTP-ответ клиенту, включая номер порта серверного сокета.

Клиент:
1) Получает ответ сервера.
2) Запоминает свой идентификатор сессии.
3) В новом потоке:
	1) Создаёт подключение по сокету к полученному от сервера его порту.
	2) Передаёт по сокету идентификатор HTTP-сессии.
	3) Ждёт ответа от сервера.
	4) Получает ответ от сервера.

Сервер в потоке-обработчике соединений:
1) Ждёт соединения от клиента.
2) Инстанцирует обычный сокет из серверного.
2) Получает по этому сокету логин от клиента.
3) Запоминает за этим логином этот сокет.

Сервер в потоке-таймере:
1) Получает по логину запомненный сокет.
2) По сокету возвращает клиенту результат.

При остановке сервер совершает следующее:
1) Останавливает таймер.
2) Закрывает серверный сокет.
3) Останавливает поток-обработчик.

== Тестовое действие ==
(Клиент посылает на сервер имя, сервер сообщает, есть ли это имя в его БД, и через 5 секунд посылает клиенту этот же результат как сообщение о событии в формате "Test action result: <result>".)
Метод: POST
Клиент:
	test
	<name>
Сервер:
	<result>:
		yes - имя существует
		no - имя не существует
	<port> - прослушиваемый сервером порт (0 если порт недоступен)
	<tmp_name> - временное имя, которое должен использовать клиент для подключения к порту сервера (пароль - пустая строка) для получения результата
